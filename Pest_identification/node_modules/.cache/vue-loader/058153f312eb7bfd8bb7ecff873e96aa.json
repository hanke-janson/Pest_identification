{"remainingRequest":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\node_modules\\vue-awesome\\components\\Icon.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\node_modules\\vue-awesome\\components\\Icon.vue","mtime":1622556307175},{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622556308397},{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\node_modules\\babel-loader\\lib\\index.js","mtime":1622556308347},{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622556308397},{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\node_modules\\vue-loader\\lib\\index.js","mtime":1622556323213}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Icon.vue"],"names":[],"mappingsfile":"Icon.vue","sourceRoot":"node_modules/vue-awesome/components","sourcesContent":["<script>\nimport nanoid from 'nanoid/non-secure'\n\nlet icons = {}\n\nfunction warn (msg, vm) {\n  if (!vm) {\n    console.error(msg)\n    return\n  }\n  vm.constructor.super.util.warn(msg, vm)\n}\n\nexport default {\n  name: 'fa-icon',\n  props: {\n    name: {\n      type: String,\n      validator (val) {\n        if (val && !(val in icons)) {\n          warn(\n            `Invalid prop: prop \"name\" is referring to an unregistered icon \"${val}\".\\n` +\n              `Please make sure you have imported this icon before using it.`,\n            this\n          )\n          return false\n        }\n        return true\n      }\n    },\n    title: String,\n    scale: [Number, String],\n    spin: Boolean,\n    inverse: Boolean,\n    pulse: Boolean,\n    flip: {\n      validator (val) {\n        return val === 'horizontal' || val === 'vertical' || val === 'both'\n      }\n    },\n    label: String,\n    tabindex: [Number, String]\n  },\n  data () {\n    return {\n      id: getId('va-'),\n      x: false,\n      y: false,\n      childrenWidth: 0,\n      childrenHeight: 0,\n      outerScale: 1\n    }\n  },\n  computed: {\n    normalizedScale () {\n      let scale = this.scale\n      scale = typeof scale === 'undefined' ? 1 : Number(scale)\n      if (isNaN(scale) || scale <= 0) {\n        warn(\n          `Invalid prop: prop \"scale\" should be a number over 0.`,\n          this\n        )\n        return this.outerScale\n      }\n      return scale * this.outerScale\n    },\n    klass () {\n      let classes = {\n        'fa-icon': true,\n        'fa-spin': this.spin,\n        'fa-flip-horizontal': this.flip === 'horizontal',\n        'fa-flip-vertical': this.flip === 'vertical',\n        'fa-flip-both': this.flip === 'both',\n        'fa-inverse': this.inverse,\n        'fa-pulse': this.pulse\n      }\n\n      if (this.classes) {\n        Object.keys(this.classes).forEach(c => {\n          if (this.classes[c]) {\n            classes[c] = true\n          }\n        })\n      }\n\n      return classes\n    },\n    icon () {\n      if (this.name) {\n        return icons[this.name]\n      }\n      return null\n    },\n    box () {\n      if (this.icon) {\n        return `0 0 ${this.icon.width} ${this.icon.height}`\n      }\n      return `0 0 ${this.width} ${this.height}`\n    },\n    ratio () {\n      if (!this.icon) {\n        return 1\n      }\n      let { width, height } = this.icon\n      return Math.max(width, height) / 16\n    },\n    width () {\n      return (\n        this.childrenWidth ||\n        (this.icon && (this.icon.width / this.ratio) * this.normalizedScale) ||\n        0\n      )\n    },\n    height () {\n      return (\n        this.childrenHeight ||\n        (this.icon && (this.icon.height / this.ratio) * this.normalizedScale) ||\n        0\n      )\n    },\n    style () {\n      if (this.normalizedScale === 1) {\n        return false\n      }\n      return {\n        fontSize: this.normalizedScale + 'em'\n      }\n    },\n    raw () {\n      // generate unique id for each icon's SVG element with ID\n      if (!this.icon || !this.icon.raw) {\n        return null\n      }\n      let raw = this.icon.raw\n      let ids = {}\n      raw = raw.replace(\n        /\\s(?:xml:)?id=([\"']?)([^\"')\\s]+)\\1/g,\n        (match, quote, id) => {\n          let uniqueId = getId('vat-')\n          ids[id] = uniqueId\n          return ` id=\"${uniqueId}\"`\n        }\n      )\n      raw = raw.replace(\n        /#(?:([^'\")\\s]+)|xpointer\\(id\\((['\"]?)([^')]+)\\2\\)\\))/g,\n        (match, rawId, _, pointerId) => {\n          let id = rawId || pointerId\n          if (!id || !ids[id]) {\n            return match\n          }\n\n          return `#${ids[id]}`\n        }\n      )\n\n      return raw\n    },\n    focusable () {\n      let { tabindex } = this\n      if (tabindex == null) {\n        return 'false'\n      }\n      let index =\n        typeof tabindex === 'string' ? parseInt(tabindex, 10) : tabindex\n      if (index >= 0) {\n        return null\n      }\n      return 'false'\n    }\n  },\n  mounted () {\n    this.updateStack()\n  },\n  updated () {\n    this.updateStack()\n  },\n  methods: {\n    updateStack () {\n      if (!this.name && this.name !== null && this.$children.length === 0) {\n        warn(`Invalid prop: prop \"name\" is required.`, this)\n        return\n      }\n\n      if (this.icon) {\n        return\n      }\n\n      let width = 0\n      let height = 0\n      this.$children.forEach(child => {\n        child.outerScale = this.normalizedScale\n\n        width = Math.max(width, child.width)\n        height = Math.max(height, child.height)\n      })\n      this.childrenWidth = width\n      this.childrenHeight = height\n      this.$children.forEach(child => {\n        child.x = (width - child.width) / 2\n        child.y = (height - child.height) / 2\n      })\n    }\n  },\n  render (h) {\n    if (this.name === null) {\n      return h()\n    }\n\n    let options = {\n      class: this.klass,\n      style: this.style,\n      attrs: {\n        role: this.$attrs.role || (this.label || this.title ? 'img' : null),\n        'aria-label': this.label || null,\n        'aria-hidden': !(this.label || this.title),\n        tabindex: this.tabindex,\n        x: this.x,\n        y: this.y,\n        width: this.width,\n        height: this.height,\n        viewBox: this.box,\n        focusable: this.focusable\n      },\n      on: this.$listeners\n    }\n\n    let titleId = this.id\n    if (this.title) {\n      options.attrs['aria-labelledby'] = titleId\n    }\n\n    if (this.raw) {\n      let html = `<g>${this.raw}</g>`\n\n      if (this.title) {\n        html = `<title id=\"${titleId}\">${escapeHTML(this.title)}</title>${html}`\n      }\n\n      options.domProps = { innerHTML: html }\n    }\n\n    let content = this.title\n      ? [h('title', { attrs: { id: titleId } }, this.title)]\n      : []\n\n    return h(\n      'svg',\n      options,\n      this.raw\n        ? null\n        : content.concat(\n          [\n            h(\n              'g',\n              this.$slots.default || (this.icon ? [\n                ...this.icon.paths.map((path, i) =>\n                  h('path', {\n                    attrs: path,\n                    key: `path-${i}`\n                  })\n                ),\n                ...this.icon.polygons.map((polygon, i) =>\n                  h('polygon', {\n                    attrs: polygon,\n                    key: `polygon-${i}`\n                  })\n                )\n              ] : [])\n            )]\n        )\n    )\n  },\n  register (data) {\n    for (let name in data) {\n      let icon = data[name]\n      let { paths = [], d, polygons = [], points } = icon\n\n      if (d) {\n        paths.push({ d })\n      }\n\n      if (points) {\n        polygons.push({ points })\n      }\n\n      icons[name] = assign({}, icon, {\n        paths,\n        polygons\n      })\n    }\n  },\n  icons\n}\n\nfunction assign (obj, ...sources) {\n  sources.forEach(source => {\n    for (let key in source) {\n      if (source.hasOwnProperty(key)) {\n        obj[key] = source[key]\n      }\n    }\n  })\n\n  return obj\n}\n\nfunction getId (prefix = '') {\n  return prefix + nanoid(7)\n}\n\nconst ESCAPE_MAP = {\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  '&': '&amp;'\n}\n\nfunction escapeHTML (html) {\n  return html.replace(/[<>\"&]/g, c => ESCAPE_MAP[c] || c)\n}\n</script>\n\n<style>\n.fa-icon {\n  display: inline-block;\n  fill: currentColor;\n  overflow: visible;\n}\n\n.fa-icon > g {\n  transform-origin: 50% 50%;\n}\n\n.fa-flip-horizontal {\n  transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  transform: scale(1, -1);\n}\n\n.fa-flip-both {\n  transform: scale(-1, -1);\n}\n\n.fa-spin > g {\n  animation: fa-spin 1s 0s infinite linear;\n}\n\n.fa-pulse > g {\n  animation: fa-spin 1s infinite steps(8);\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n"]}]}