{"remainingRequest":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\Pest_identification\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\Pest_identification\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\Pest_identification\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\Pest_identification\\src\\components\\echart\\centerLeft\\centerLeft2Chart\\chart.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\Pest_identification\\src\\components\\echart\\centerLeft\\centerLeft2Chart\\chart.vue","mtime":1622736326920},{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\Pest_identification\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622556308397},{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\Pest_identification\\node_modules\\babel-loader\\lib\\index.js","mtime":1622556308347},{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\Pest_identification\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622556308397},{"path":"C:\\Users\\leo\\Desktop\\害虫识别\\Pest_identification\\Pest_identification\\node_modules\\vue-loader\\lib\\index.js","mtime":1622556323213}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["chart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <Echart\r\n      id=\"centreLeft2Chart\"\r\n      ref=\"centreLeft2ChartRef\"\r\n      :options=\"options\"\r\n      height=\"4.5rem\"\r\n      width=\"4.125rem\"\r\n    ></Echart>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Echart from '@/common/echart';\r\nexport default {\r\n  data() {\r\n    return {\r\n      options: {},\r\n    };\r\n  },\r\n  components: {\r\n    Echart,\r\n  },\r\n  props: {\r\n    cdata: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n  },\r\n  watch: {\r\n    cdata: {\r\n      handler(newData) {\r\n        // 设置点的位置(经纬度)\r\n        const geoCoordMap = {\r\n          市中区: [117.557281,34.856651, 10],\r\n          薛城区: [117.265293,34.79789, 10],\r\n          峄城区: [117.586316,34.767713, 10],\r\n          台儿庄区:[117.734747,34.564815,10],\r\n          山亭区: [117.458968,35.096077, 10],\r\n          滕州市: [117.162098,35.088498, 10],\r\n        };\r\n        let seriesData = [\r\n          {\r\n            name: '市中区',\r\n          },\r\n          {\r\n            name: '薛城区',\r\n          },\r\n          {\r\n            name: '峄城区',\r\n          },\r\n          {\r\n            name: '台儿庄区',\r\n          },\r\n          {\r\n            name: '山亭区',\r\n          },\r\n          {\r\n            name: '滕州市',\r\n          },\r\n          \r\n        ];\r\n        let convertData = function (data) {\r\n          let scatterData = [];\r\n          for (var i = 0; i < data.length; i++) {\r\n            var geoCoord = geoCoordMap[data[i].name];\r\n            if (geoCoord) {\r\n              scatterData.push({\r\n                name: data[i].name,\r\n                value: geoCoord.concat(data[i].value),\r\n              });\r\n            }\r\n          }\r\n          return scatterData;\r\n        };\r\n        this.options = {\r\n          showLegendSymbol: true,\r\n          tooltip: {\r\n            trigger: 'item',\r\n            textStyle: {\r\n              fontSize: 14,\r\n              lineHeight: 22,\r\n            },\r\n            position: point => {\r\n              // 固定在顶部\r\n              return [point[0] + 50, point[1] - 20];\r\n            },\r\n            // 如果需要自定义 tooltip样式，需要使用formatter\r\n            /*\r\n              formatter: params => {\r\n                return `<div style=\"\"> ... </div>`\r\n              }\r\n            */\r\n          },\r\n          visualMap: {\r\n            min: 0,\r\n            max: 10,\r\n            show: false,\r\n            seriesIndex: 0,\r\n            // 颜色\r\n            inRange: {\r\n              color: ['rgba(41,166,206, .5)', 'rgba(69,117,245, .9)'],\r\n            },\r\n          },\r\n          // 底部背景\r\n          geo: {\r\n            show: true,\r\n            aspectScale: 0.85, //长宽比\r\n            zoom: 1.0,\r\n            top: '10%',\r\n            left: '10%',\r\n            map: '枣庄',\r\n            roam: false,\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: 'rgba(0,0,0,0)',\r\n                shadowColor: 'rgba(7,114,204, .8)',\r\n                shadowOffsetX: 5,\r\n                shadowOffsetY: 5,\r\n              },\r\n              emphasis: {\r\n                areaColor: '#00aeef',\r\n              },\r\n            },\r\n          },\r\n          series: [\r\n            {\r\n              name: '相关指数',\r\n              type: 'map',\r\n              aspectScale: 0.85, //长宽比\r\n              zoom: 1.2,\r\n              mapType: '枣庄', // 自定义扩展图表类型\r\n              top: '10%',\r\n              left: '10%',\r\n              itemStyle: {\r\n                normal: {\r\n                  color: 'red',\r\n                  areaColor: 'rgba(19,54,162, .5)',\r\n                  borderColor: 'rgba(0,242,252,.3)',\r\n                  borderWidth: 1,\r\n                  shadowBlur: 7,\r\n                  shadowColor: '#00f2fc',\r\n                },\r\n                emphasis: {\r\n                  areaColor: '#4f7fff',\r\n                  borderColor: 'rgba(0,242,252,.6)',\r\n                  borderWidth: 2,\r\n                  shadowBlur: 10,\r\n                  shadowColor: '#00f2fc',\r\n                },\r\n              },\r\n              label: {\r\n                formatter: params => `${params.name}`,\r\n                show: true,\r\n                position: 'insideRight',\r\n                textStyle: {\r\n                  fontSize: 14,\r\n                  color: '#efefef',\r\n                },\r\n                emphasis: {\r\n                  textStyle: {\r\n                    color: '#fff',\r\n                  },\r\n                },\r\n              },\r\n              data: newData,\r\n            },\r\n            {\r\n              type: 'effectScatter',\r\n              coordinateSystem: 'geo',\r\n              symbolSize: 7,\r\n              effectType: 'ripple',\r\n              legendHoverLink: false,\r\n              showEffectOn: 'render',\r\n              rippleEffect: {\r\n                period: 4,\r\n                scale: 2.5,\r\n                brushType: 'stroke',\r\n              },\r\n              zlevel: 1,\r\n              itemStyle: {\r\n                normal: {\r\n                  color: '#99FBFE',\r\n                  shadowBlur: 5,\r\n                  shadowColor: '#fff',\r\n                },\r\n              },\r\n              data: convertData(seriesData),\r\n            },\r\n          ],\r\n        };\r\n        // 重新选择区域\r\n        this.handleMapRandomSelect();\r\n      },\r\n      immediate: true,\r\n      deep: true,\r\n    },\r\n  },\r\n  methods: {\r\n    // 开启定时器\r\n    startInterval() {\r\n      const _self = this;\r\n      // 应通过接口获取配置时间，暂时写死5s\r\n      const time = 2000;\r\n      if (this.intervalId !== null) {\r\n        clearInterval(this.intervalId);\r\n      }\r\n      this.intervalId = setInterval(() => {\r\n        _self.reSelectMapRandomArea();\r\n      }, time);\r\n    },\r\n    // 重新随机选中地图区域\r\n    reSelectMapRandomArea() {\r\n      const length = 9;\r\n      this.$nextTick(() => {\r\n        const map = this.$refs.centreLeft2ChartRef.chart;\r\n        let index = Math.floor(Math.random() * length);\r\n        while (index === this.preSelectMapIndex || index >= length) {\r\n          index = Math.floor(Math.random() * length);\r\n        }\r\n        map.dispatchAction({\r\n          type: 'mapUnSelect',\r\n          seriesIndex: 0,\r\n          dataIndex: this.preSelectMapIndex,\r\n        });\r\n        map.dispatchAction({\r\n          type: 'showTip',\r\n          seriesIndex: 0,\r\n          dataIndex: index,\r\n        });\r\n        map.dispatchAction({\r\n          type: 'mapSelect',\r\n          seriesIndex: 0,\r\n          dataIndex: index,\r\n        });\r\n        this.preSelectMapIndex = index;\r\n      });\r\n    },\r\n    handleMapRandomSelect() {\r\n      this.$nextTick(() => {\r\n        const map = this.$refs.centreLeft2ChartRef.chart;\r\n        const _self = this;\r\n        setTimeout(() => {\r\n          _self.reSelectMapRandomArea();\r\n        }, 0);\r\n        // 移入区域，清除定时器、取消之前选中并选中当前\r\n        map.on('mouseover', function (params) {\r\n          clearInterval(_self.intervalId);\r\n          map.dispatchAction({\r\n            type: 'mapUnSelect',\r\n            seriesIndex: 0,\r\n            dataIndex: _self.preSelectMapIndex,\r\n          });\r\n          map.dispatchAction({\r\n            type: 'mapSelect',\r\n            seriesIndex: 0,\r\n            dataIndex: params.dataIndex,\r\n          });\r\n          _self.preSelectMapIndex = params.dataIndex;\r\n        });\r\n        // 移出区域重新随机选中地图区域，并开启定时器\r\n        map.on('globalout', function () {\r\n          _self.reSelectMapRandomArea();\r\n          _self.startInterval();\r\n        });\r\n        this.startInterval();\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"sourceRoot":"src/components/echart/centerLeft/centerLeft2Chart"}]}